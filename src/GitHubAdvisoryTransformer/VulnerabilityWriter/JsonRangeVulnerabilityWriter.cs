using GitHubAdvisoryTransformer.Entities;
using NuGet.Versioning;
using Newtonsoft.Json;

namespace GitHubAdvisoryTransformer {
    public class JsonRangeVulnerabilityWriter : IVulnerabilityWriter
    {
        private string _outputFilePath;
        private Dictionary<string, List<Advisory>> _vulnerabilityDict;

        public JsonRangeVulnerabilityWriter(string JsonFilePath) 
        {
            _outputFilePath = JsonFilePath;
            _vulnerabilityDict = new Dictionary<string, List<Advisory>>();
        }

        public int WriteVulnerabilities(IEnumerable<PackageVulnerability> vulnerabilities) {
            var writtenCount = 0;
            foreach(var vulnerability in vulnerabilities) {
                writtenCount += WriteVulnerability(vulnerability) ? 1 : 0;
            }

            return writtenCount;
        }

        public bool WriteVulnerability(PackageVulnerability packageVulnerability) 
        {
            try {
                foreach (var vulnerableRange in packageVulnerability.AffectedRanges) {
                    var idToWrite = vulnerableRange.PackageId.ToLowerInvariant();
                    var advisory = new Advisory {
                        Url = new Uri(packageVulnerability.AdvisoryUrl),
                        Severity = (int)packageVulnerability.Severity,
                        Versions = vulnerableRange.PackageVersionRange
                    };

                    if (!_vulnerabilityDict.ContainsKey(idToWrite)) {
                        _vulnerabilityDict.Add(idToWrite, new List<Advisory>());
                    }

                    _vulnerabilityDict[idToWrite].Add(advisory);
                }
                return true;
            }
            catch (Exception e) {
                Console.WriteLine("WriteVulnerability failed.");
                Console.WriteLine($"Info: {packageVulnerability.AdvisoryUrl}");
                Console.WriteLine(e);
                return false;
            }
        }

        public void FlushToFile(string outputFile = null) {
            var outputFilePath = outputFile == null ? _outputFilePath : outputFile;
            var fullOutput = JsonConvert.SerializeObject(_vulnerabilityDict, Formatting.Indented);
            File.WriteAllText(outputFilePath, fullOutput);
        }
    }
}
